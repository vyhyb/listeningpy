window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "listeningpy", "modulename": "listeningpy", "kind": "module", "doc": "<p><a href=\"https://github.com/vyhyb/listeningpy\">GitHub repository</a></p>\n\n<p>This library provides a way to design listening tests in Python.</p>\n\n<p>The library contains several functions for audio processing, such as convolution or different types of normalization, including loudness normalization using the <a href=\"https://github.com/Eomys/MoSQITo\">mosqito</a> library.  </p>\n\n<p>Only ABX test protocol is currently supported, but more protocols will be added in the future.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>It is currently not possible to install this library using <code>pip</code> or <code>conda</code>, please use the latest <a href=\"https://github.com/vyhyb/listeningpy/releases\">released package</a> instead and install using <a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/\"><code>pip</code> locally</a>.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>API documentation can be found <a href=\"https://vyhyb.github.io/listeningpy/\">here</a>.</p>\n\n<h2 id=\"example-usage\">Example usage</h2>\n\n<p>The following script implements a basic ABX listening test using the listeningpy library.</p>\n\n<p>More examples are to be added in the future to the <a href=\"https://github.com/vyhyb/listeningpy/examples\">examples</a> folder.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">customtkinter</span> <span class=\"k\">as</span> <span class=\"nn\">ctk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"n\">DataFrame</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">strftime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">listeningpy.gui</span> <span class=\"kn\">import</span> <span class=\"n\">abx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">listeningpy.gui.gui</span> <span class=\"kn\">import</span> <span class=\"n\">InitFrame</span>\n<span class=\"kn\">from</span> <span class=\"nn\">listeningpy.set_preparation</span> <span class=\"kn\">import</span> <span class=\"n\">abx_combination</span><span class=\"p\">,</span> <span class=\"n\">randomization</span>\n<span class=\"kn\">from</span> <span class=\"nn\">listeningpy.processing</span> <span class=\"kn\">import</span> <span class=\"n\">straight</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;%H:%M:%S&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ABXTest</span><span class=\"p\">(</span><span class=\"n\">ctk</span><span class=\"o\">.</span><span class=\"n\">CTk</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&#39;&#39;&#39;Main class for the ABX test GUI.&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">ctk</span><span class=\"o\">.</span><span class=\"n\">CTk</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">switch_frame</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_frame</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&#39;&#39;&#39;Destroys current frame and replaces it with a new one.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frame</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frame</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frame</span> <span class=\"o\">=</span> <span class=\"n\">new_frame</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frame</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"p\">(</span><span class=\"n\">relx</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">rely</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">anchor</span><span class=\"o\">=</span><span class=\"n\">ctk</span><span class=\"o\">.</span><span class=\"n\">CENTER</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">&#39;-sounds&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;stimuli&#39;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">&#39;Directory path for sounds&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n    <span class=\"n\">sounds_dir</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">sounds</span>\n\n    <span class=\"c1\"># Read files in the specified folder and generate combinations for ABX test</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">abx_combination</span><span class=\"p\">(</span><span class=\"n\">sounds_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">,</span> <span class=\"n\">constant_reference</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">randomization</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create root window and GUI</span>\n    <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">ABXTest</span><span class=\"p\">()</span>\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">&#39;ABX test v0.0.1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">abx</span><span class=\"o\">.</span><span class=\"n\">Abx</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span>\n        <span class=\"n\">df</span><span class=\"p\">,</span> \n        <span class=\"n\">processing_func</span><span class=\"o\">=</span><span class=\"n\">straight</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">init</span> <span class=\"o\">=</span> <span class=\"n\">InitFrame</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">_frame</span> <span class=\"o\">=</span> <span class=\"n\">init</span>\n    <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"p\">(</span><span class=\"n\">relx</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">rely</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">anchor</span><span class=\"o\">=</span><span class=\"n\">ctk</span><span class=\"o\">.</span><span class=\"n\">CENTER</span><span class=\"p\">)</span>\n\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">mainloop</span><span class=\"p\">()</span>\n\n    <span class=\"n\">init_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;first_name&#39;</span><span class=\"p\">:</span> <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;second_name&#39;</span><span class=\"p\">:</span> <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">second_name</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;date_birth&#39;</span><span class=\"p\">:</span> <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">date_of_birth</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;gender&#39;</span><span class=\"p\">:</span> <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">gender</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;hearing_impaired&#39;</span><span class=\"p\">:</span> <span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">hear_impaired</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">&quot;%y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">_%H-%M&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Save user&#39;s information and test results to CSV files</span>\n    <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">init_dict</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">timestamp</span><span class=\"si\">}</span><span class=\"s1\">_</span><span class=\"si\">{</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s1\">_&#39;</span><span class=\"o\">+</span>\n        <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">second_name</span><span class=\"si\">}</span><span class=\"s1\">_info.csv&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">timestamp</span><span class=\"si\">}</span><span class=\"s1\">_</span><span class=\"si\">{</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s1\">_&#39;</span><span class=\"o\">+</span>\n        <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">second_name</span><span class=\"si\">}</span><span class=\"s1\">_results.csv&#39;</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"acknowledgments\">Acknowledgments</h2>\n\n<p>This library was created thanks to the <a href=\"https://www.vut.cz/vav/projekty/detail/35091\">FAST-J-23-8284</a> project.</p>\n\n<p>Special thanks to Prof. Monika Rychtarikova for her help with the theory and design of the listening tests and also to Prof. Christ Glorieux, Yannick Sluyts and Dominika Hudokova for their valuable feedback.</p>\n\n<p>Github Copilot was used to generate parts of the documentation and code.</p>\n\n<h2 id=\"author\">Author</h2>\n\n<ul>\n<li><p><a href=\"https://www.fce.vutbr.cz/o-fakulte/lide/david-jun-12801/\">David Jun</a></p>\n\n<p>PhD student at <a href=\"https://www.vutbr.cz/en/\">Brno University of Technology</a> and <a href=\"https://www.kuleuven.be/english/\">KU Leuven</a></p></li>\n</ul>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Pull requests are welcome. For any changes, please open an issue first\nto discuss what you would like to change.</p>\n\n<p>Please make sure to update tests as appropriate.</p>\n\n<h2 id=\"license\">License</h2>\n\n<p><a href=\"https://choosealicense.com/licenses/gpl-3.0/\">GNU GPLv3</a></p>\n"}, {"fullname": "listeningpy.audiotools", "modulename": "listeningpy.audiotools", "kind": "module", "doc": "<p>This module contains functions for describing audio signals.</p>\n"}, {"fullname": "listeningpy.audiotools.audio_stats", "modulename": "listeningpy.audiotools", "qualname": "audio_stats", "kind": "function", "doc": "<p>Calculate various audio statistics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe audio signal as a numpy array.</li>\n<li><strong>fs</strong> (int):\nThe sample rate of the audio signal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the peak amplitude, RMS amplitude, and integrated loudness of the audio signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.audiotools.write_audio", "modulename": "listeningpy.audiotools", "qualname": "write_audio", "kind": "function", "doc": "<p>Write audio data to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe audio data to be written.</li>\n<li><strong>fs</strong> (int):\nThe sample rate of the audio data.</li>\n<li><strong>destination</strong> (str):\nThe destination directory where the file will be saved.</li>\n<li><strong>filename</strong> (str):\nThe name of the file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.config", "modulename": "listeningpy.config", "kind": "module", "doc": "<p>This module contains functions for reading and parsing configuration files.</p>\n"}, {"fullname": "listeningpy.config.person_identifiers", "modulename": "listeningpy.config", "qualname": "person_identifiers", "kind": "function", "doc": "<p>Read a configuration file and extract person identifiers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nThe path to the configuration file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing person identifiers.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IOError</strong>: If something goes wrong while reading the config file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.config.test_settings", "modulename": "listeningpy.config", "qualname": "test_settings", "kind": "function", "doc": "<p>Read and parse the configuration file at the given path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nThe path to the configuration file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, str]</strong>: A dictionary containing the settings parsed from the configuration file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IOError</strong>: If something goes wrong while reading the configuration file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui", "modulename": "listeningpy.gui", "kind": "module", "doc": "<p>GUI module for listeningpy</p>\n"}, {"fullname": "listeningpy.gui.abx", "modulename": "listeningpy.gui.abx", "kind": "module", "doc": "<p>This module defines the <code>Abx</code> class, which represents a basic ABX test window with a counter.</p>\n"}, {"fullname": "listeningpy.gui.abx.Abx", "modulename": "listeningpy.gui.abx", "qualname": "Abx", "kind": "class", "doc": "<p>A basic ABX test window with a counter</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parent</strong>: parent customtkinter widget</li>\n<li><p><strong>combinations</strong> (pandas.DataFrame):\nA dataframe carrying the prepaired randomized combinations in a format</p>\n\n<table>\n<thead>\n<tr>\n  <th>0</th>\n  <th>1</th>\n  <th>Ref</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>path</td>\n  <td>path</td>\n  <td>path</td>\n</tr>\n</tbody>\n</table>\n\n<p>This can be obtained from the routines of \nlisteningpy.set_preparation module (abx_combination, \nrandomization).\nThis attribute also stores the responses, number of clicks per \niteration and time between the first and last clicked button.</p></li>\n<li><strong>processing_func</strong> (func):\nOne of the listeningpy.processing functions, defaults to\nstraight. The alternatives can be convolution, lf_convolution.</li>\n<li><strong>args, kwargs</strong>: The necessary kwargs depend on the processing function.</li>\n</ul>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "listeningpy.gui.abx.Abx.__init__", "modulename": "listeningpy.gui.abx", "qualname": "Abx.__init__", "kind": "function", "doc": "<p>Initialize the ABX GUI.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>master</strong> (CTk):\nThe master widget.</li>\n<li><strong>combinations</strong> (DataFrame):\nThe combinations of stimuli.</li>\n<li><strong>processing_func</strong> (Callable, optional):\nThe processing function to apply, by default straight.</li>\n<li><strong><em>args, *</em>kwargs</strong> ():\nAdditional arguments and keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">master</span><span class=\"p\">:</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">ctk_tk</span><span class=\"o\">.</span><span class=\"n\">CTk</span>,</span><span class=\"param\">\t<span class=\"n\">combinations</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">processing_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">straight</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.abx.Abx.right_answer", "modulename": "listeningpy.gui.abx", "qualname": "Abx.right_answer", "kind": "function", "doc": "<p>Checks which answer is correct for each set.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>column</strong> (str):\nthe right answer column name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.abx.Abx.store_response", "modulename": "listeningpy.gui.abx", "qualname": "Abx.store_response", "kind": "function", "doc": "<p>Returns response, number of clicks and time\nneeded for the set.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>right_choice</strong> (int):\n1 is for right, 0 for wrong choice</li>\n<li><strong>clicks</strong> (int):\nnumber of clicks (illustrates hesitation)</li>\n<li><strong>time</strong> (float):\nnumber of seconds needed for completion</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.abx.Abx.move_to_next", "modulename": "listeningpy.gui.abx", "qualname": "Abx.move_to_next", "kind": "function", "doc": "<p>Stores response to self.combinations dataframe and moves\nto the next set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.adaptive", "modulename": "listeningpy.gui.adaptive", "kind": "module", "doc": "<p>This module contains the <code>Adaptive</code> class, which represents a basic Adaptive test window for convolution-based processing. \nIt provides functionality for playing audio files, recording responses, and moving to the next set of sentences.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parent</strong> (ctk.CTk):\nThe parent customtkinter widget.</li>\n<li><strong>sets</strong> (pd.DataFrame):\nA DataFrame carrying the prepared randomized sets in the following format:\n| set_id | id | path | transcription |\n|--------|----|------|---------------|\n|set_id  |id  |path  |transcription  |\nThis DataFrame can be obtained from the routines of the <code>listeningpy.set_preparation</code> module (adaptive_combination, randomization).\nThis attribute also stores the responses, number of clicks per iteration, and time between the first and last clicked button.</li>\n<li><strong>irs</strong> (pd.DataFrame):\nA DataFrame containing the item response theory parameters.</li>\n<li><strong>set_id</strong> (str, optional):\nThe ID of the set to be used. If None, all sets will be used.</li>\n<li><strong>initial_difficulty</strong> (int, optional):\nThe index of the initial difficulty level. Default is -1.</li>\n<li><strong>processing_func</strong> (Callable, optional):\nThe processing function to be used. Default is straight.</li>\n<li><strong><em>args, *</em>kwargs</strong>: Additional arguments and keyword arguments associated with the processing function.</li>\n</ul>\n"}, {"fullname": "listeningpy.gui.adaptive.Adaptive", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive", "kind": "class", "doc": "<p>A basic Adaptive test window for convolution based processing.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parent</strong>: parent customtkinter widget</li>\n<li><strong>sets</strong> (pandas.DataFrame):\nA dataframe carrying the prepaired randomized sets in a format\n| set_id |   id   |  path  | transcription |\n|--------|--------|--------|---------------|\n|set_id  |id      |path    |transcription  |\nThis can be obtained from the routines of \nlisteningpy.set_preparation module (adaptive_combination, \nrandomization).\nThis attribute also stores the responses, number of clicks per \niteration and time between the first and last clicked button.</li>\n</ul>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.__init__", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.__init__", "kind": "function", "doc": "<p>Initialize the AdaptiveGUI class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>master</strong> (ctk.CTk):\nThe master widget.</li>\n<li><strong>sets</strong> (pd.DataFrame):\nThe DataFrame containing the sets.</li>\n<li><strong>irs</strong> (pd.DataFrame):\nThe DataFrame containing the item response theory parameters.</li>\n<li><strong>set_id</strong> (str, optional):\nThe ID of the set to be used. If None, all sets will be used.</li>\n<li><strong>initial_difficulty</strong> (int, optional):\nThe index of the initial difficulty level. Default is -1.</li>\n<li><strong>processing_func</strong> (Callable, optional):\nThe processing function to be used. Default is straight.</li>\n<li><strong><em>args, *</em>kwargs</strong>: Additional arguments and keyword arguments \nassociated with the processing function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">master</span><span class=\"p\">:</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">ctk_tk</span><span class=\"o\">.</span><span class=\"n\">CTk</span>,</span><span class=\"param\">\t<span class=\"n\">sets</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">irs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">set_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_difficulty</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">processing_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">straight</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.play", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.play", "kind": "function", "doc": "<p>Plays the audio file with adaptive settings.</p>\n\n<p>This method reads the impulse response (IR) file based on the current difficulty level,\nand then plays the audio file with the specified processing function and additional arguments.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.toggle_segmented", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.toggle_segmented", "kind": "function", "doc": "<p>Toggle the segmented button based on the given value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (str):\nThe value to determine the state of the segmented button.\nPossible values are 'Wrong' and 'Correct'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.reset_buttons", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.reset_buttons", "kind": "function", "doc": "<p>Reset the state of the buttons.</p>\n\n<p>This method disables the segmented_button and button_next buttons.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.move_to_next", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.move_to_next", "kind": "function", "doc": "<p>Stores response to self.current_set dataframe and moves\nto the next set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.adaptive.Adaptive.load_sentences", "modulename": "listeningpy.gui.adaptive", "qualname": "Adaptive.load_sentences", "kind": "function", "doc": "<p>Load the sentences from the given path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui", "modulename": "listeningpy.gui.gui", "kind": "module", "doc": "<p>This module contains the GUI classes for the listeningpy package.</p>\n"}, {"fullname": "listeningpy.gui.gui.PlayButton", "modulename": "listeningpy.gui.gui", "qualname": "PlayButton", "kind": "class", "doc": "<p>Customized customtkinter.CTkButton</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>parent</strong>: parent customtkinter widget</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>reset_count()\n    Resets the click counter variable to 0.</p>\n", "bases": "customtkinter.windows.widgets.ctk_button.CTkButton"}, {"fullname": "listeningpy.gui.gui.PlayButton.__init__", "modulename": "listeningpy.gui.gui", "qualname": "PlayButton.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.gui.InitFrame", "modulename": "listeningpy.gui.gui", "qualname": "InitFrame", "kind": "class", "doc": "<p>Frame with rounded corners and border.\nDefault foreground colors are set according to theme.\nTo make the frame transparent set fg_color=None.\nFor detailed information check out the documentation.</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "listeningpy.gui.gui.InitFrame.__init__", "modulename": "listeningpy.gui.gui", "qualname": "InitFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"n\">test_frame</span>, </span><span class=\"param\"><span class=\"n\">cfg_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.gui.InitFrameAdaptive", "modulename": "listeningpy.gui.gui", "qualname": "InitFrameAdaptive", "kind": "class", "doc": "<p>A class representing the initial frame for an adaptive test.</p>\n\n<p>This frame allows the user to input the participant identifier and the sentence set for the test.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>master</strong> (cTK.Widget):\nThe master widget.</li>\n<li><strong>test_frame</strong> (_type_):\nThe frame representing the test.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>test_frame</strong> (_type_):\nThe frame representing the test.</li>\n<li><strong>timestamp</strong> (str):\nThe current timestamp in the format \"yy-mm-dd_HH-MM\".</li>\n<li><strong>participant</strong> (str):\nThe participant identifier.</li>\n<li><strong>sentence_set</strong> (str):\nThe sentence set for the test.</li>\n<li><strong>participant_label</strong> (ctk.CTkLabel):\nThe label for the participant identifier.</li>\n<li><strong>sentence_set_label</strong> (ctk.CTkLabel):\nThe label for the sentence set.</li>\n<li><strong>participant_entry</strong> (ctk.CTkEntry):\nThe entry field for the participant identifier.</li>\n<li><strong>sentence_set_entry</strong> (ctk.CTkEntry):\nThe entry field for the sentence set.</li>\n<li><strong>start_button</strong> (ctk.CTkButton):\nThe button to start the test.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>button_clicked()\n    Event handler for the button click event. Sets the participant identifier and sentence set,\n    loads the sentences for the test, and switches to the test frame.</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "listeningpy.gui.gui.InitFrameAdaptive.__init__", "modulename": "listeningpy.gui.gui", "qualname": "InitFrameAdaptive.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"n\">test_frame</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.gui.InitFrameAdaptive.button_clicked", "modulename": "listeningpy.gui.gui", "qualname": "InitFrameAdaptive.button_clicked", "kind": "function", "doc": "<p>Handles the button click event.</p>\n\n<p>This method retrieves the participant and sentence set information from the GUI,\nsets the ID of the sentence set, loads the sentences, and switches to the test frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.IntermediateFrameAdaptive", "modulename": "listeningpy.gui.gui", "qualname": "IntermediateFrameAdaptive", "kind": "class", "doc": "<p>A custom frame for intermediate adaptive testing.</p>\n\n<p>This frame is used to display the intermediate adaptive testing interface.\nIt contains widgets for entering the next sentence set, starting the test,\nand ending the test.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>master</strong> (tk.Tk):\nThe master widget.</li>\n<li><strong>test_frame</strong> (TestFrame):\nThe test frame to switch to after starting the test.</li>\n<li><strong>*args</strong> (tuple):\nAdditional positional arguments.</li>\n<li><strong>**kwargs</strong> (dict):\nAdditional keyword arguments.</li>\n</ul>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "listeningpy.gui.gui.IntermediateFrameAdaptive.__init__", "modulename": "listeningpy.gui.gui", "qualname": "IntermediateFrameAdaptive.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"n\">test_frame</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "listeningpy.gui.gui.IntermediateFrameAdaptive.button_clicked", "modulename": "listeningpy.gui.gui", "qualname": "IntermediateFrameAdaptive.button_clicked", "kind": "function", "doc": "<p>Callback function for the start button click event.</p>\n\n<p>This function is called when the start button is clicked. It retrieves\nthe sentence set entered by the user, sets it in the test frame, loads\nthe sentences for the test, and switches to the test frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.count_add", "modulename": "listeningpy.gui.gui", "qualname": "count_add", "kind": "function", "doc": "<p>Adds 1 to click counter attribute of a PlayButton</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>button</strong> (PlayButton):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button</span><span class=\"p\">:</span> <span class=\"n\">listeningpy</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">PlayButton</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.first_clicked", "modulename": "listeningpy.gui.gui", "qualname": "first_clicked", "kind": "function", "doc": "<p>Checks whether the button is clicked for the first time. In case\nit is, the current time is stored for future duration evaluation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>button</strong> (ctk.CTkButton):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button</span><span class=\"p\">:</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">ctk_button</span><span class=\"o\">.</span><span class=\"n\">CTkButton</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.stopwatch", "modulename": "listeningpy.gui.gui", "qualname": "stopwatch", "kind": "function", "doc": "<p>Calculates the time needed for the completion of current set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>button_start</strong> (PlayButton):\nfirst button clicked</li>\n<li><strong>button_end</strong> (ctk.CTkButton):\nlast button clicked ('Next')</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>t</strong> (float):\ntime between first and last click</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_start</span><span class=\"p\">:</span> <span class=\"n\">listeningpy</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">PlayButton</span>,</span><span class=\"param\">\t<span class=\"n\">button_end</span><span class=\"p\">:</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">ctk_button</span><span class=\"o\">.</span><span class=\"n\">CTkButton</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.play_click", "modulename": "listeningpy.gui.gui", "qualname": "play_click", "kind": "function", "doc": "<p>Defines actions for playback buttons.</p>\n\n<ul>\n<li>adding 1 to button.click_count</li>\n<li>playing stimuli</li>\n<li>enables next button</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stimuli_path</strong> (str):\npath to stimuli</li>\n<li><strong>button</strong> (PlayButton):\nbutton just clicked (for counter)</li>\n<li><strong>next_buttons</strong> (list[ctk.CTkButton, ctk.CTkRadioButton]):\nlist of buttons to be enabled after click</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stimuli_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">button</span><span class=\"p\">:</span> <span class=\"n\">listeningpy</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">PlayButton</span>,</span><span class=\"param\">\t<span class=\"n\">next_buttons</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">ctk_button</span><span class=\"o\">.</span><span class=\"n\">CTkButton</span><span class=\"p\">,</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">ctk_radiobutton</span><span class=\"o\">.</span><span class=\"n\">CTkRadioButton</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">processing_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">straight</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.gui.gui.check_choice", "modulename": "listeningpy.gui.gui", "qualname": "check_choice", "kind": "function", "doc": "<p>Enables the 'Next' button. Checks whether all stimuli were played and\none chosen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>last_played</strong> (PlayButton):\nlast enabled PlayButton</li>\n<li><strong>button_end</strong> (ctk.CTkButton):\n'Next' button</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">last_played</span><span class=\"p\">:</span> <span class=\"n\">listeningpy</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">PlayButton</span>,</span><span class=\"param\">\t<span class=\"n\">button_end</span><span class=\"p\">:</span> <span class=\"n\">customtkinter</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">ctk_button</span><span class=\"o\">.</span><span class=\"n\">CTkButton</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization", "modulename": "listeningpy.normalization", "kind": "module", "doc": "<p>This module contains functions for normalizing audio signals.</p>\n"}, {"fullname": "listeningpy.normalization.fs_to_pressure", "modulename": "listeningpy.normalization", "qualname": "fs_to_pressure", "kind": "function", "doc": "<p>Converts audio from full-scale (FS) to pressure (Pa).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe input audio signal.</li>\n<li><strong>dbfs_db</strong> (float):\nThe sound pressure level associated with 0 dBFS.</li>\n<li><strong>p0</strong> (float, optional):\nThe reference sound pressure in pascals (Pa), by default 2e-5.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The audio signal converted to pressure (Pa).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">dbfs_db</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2e-05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization.eq_loudness_lvl", "modulename": "listeningpy.normalization", "qualname": "eq_loudness_lvl", "kind": "function", "doc": "<p>Calculate the log average loudness level of an audio signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio_pressure</strong> (ndarray):\nArray containing the audio pressure values.</li>\n<li><strong>fs</strong> (int):\nSampling frequency of the audio signal.</li>\n<li><strong>field_type</strong> (str, optional):\nType of sound field. Possible values are \"diffuse\" (default) or \"free\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The loudness level in phon.</li>\n<li><strong>tuple</strong>: A tuple containing the loudness values and corresponding time values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio_pressure</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">field_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diffuse&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization.peak_normalize", "modulename": "listeningpy.normalization", "qualname": "peak_normalize", "kind": "function", "doc": "<p>Normalize the peak level of an audio signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe input audio signal.</li>\n<li><strong>fs</strong> (int):\nThe sample rate of the audio signal.</li>\n<li><strong>peak</strong> (float, optional):\nThe desired peak level in decibels (dB), by default 0.</li>\n<li><strong>reference</strong> (np.ndarray, optional):\nThe reference audio signal for normalization, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, float]</strong>: A tuple containing the normalized audio signal and the sample rate.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function normalizes the peak level of the input audio signal to the specified peak level.\nIf a reference audio signal is provided, the normalization is performed relative to the peak level of the reference signal.\nIf no reference signal is provided, the normalization is performed relative to the peak level of the input audio signal itself.\nThe normalization factor is calculated based on the desired peak level and the maximum absolute value of the reference signal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">peak</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization.rms_normalize", "modulename": "listeningpy.normalization", "qualname": "rms_normalize", "kind": "function", "doc": "<p>Normalize the audio signal to a target RMS level.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe input audio signal.</li>\n<li><strong>fs</strong> (int):\nThe sample rate of the audio signal.</li>\n<li><strong>rms</strong> (float, optional):\nThe target RMS level in decibels (dB), by default -9 dB.</li>\n<li><strong>reference</strong> (np.ndarray, optional):\nThe reference audio signal used for normalization, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, float]</strong>: A tuple containing the normalized audio signal and the sample rate.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function normalizes the audio signal to a target RMS level specified in decibels (dB).\nIf a reference audio signal is provided, the normalization is performed relative to the RMS level of the reference signal.\nIf no reference signal is provided, the normalization is performed relative to the RMS level of the input audio signal.\nThe resulting normalized audio signal is multiplied by a scaling factor to achieve the target RMS level.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">rms</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization.lufs_normalize", "modulename": "listeningpy.normalization", "qualname": "lufs_normalize", "kind": "function", "doc": "<p>Normalize the loudness of an audio signal to a target LUFS level.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe input audio signal as a NumPy array.</li>\n<li><strong>fs</strong> (int):\nThe sample rate of the audio signal.</li>\n<li><strong>lufs</strong> (float, optional):\nThe target loudness level in LUFS (Loudness Units Full Scale). Default is -16 LUFS.</li>\n<li><strong>reference</strong> (np.ndarray, optional):\nThe reference audio signal to calculate the loudness. If not provided, the input audio signal is used as the reference.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, int]</strong>: A tuple containing the normalized audio signal as a NumPy array and the sample rate as an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">lufs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.normalization.ir_sum_normalize", "modulename": "listeningpy.normalization", "qualname": "ir_sum_normalize", "kind": "function", "doc": "<p>Normalize the audio based on the sum of the impulse response (IR).</p>\n\n<p>This function normalizes the given audio signal based on the sum of the absolute values of the impulse response (IR).\nThe normalization factor is calculated as 10^(ir_sum/20) divided by the sum of the absolute values of the IR.\nThe audio signal is then multiplied by this factor to achieve the desired normalization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (np.ndarray):\nThe input audio signal.</li>\n<li><strong>ir</strong> (np.ndarray):\nThe impulse response (IR) signal.</li>\n<li><strong>fs</strong> (int):\nThe sampling rate of the audio signal.</li>\n<li><strong>ir_sum</strong> (float, optional):\nThe desired sum of the IR in decibels (dB), by default -9.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The normalized audio signal.</li>\n<li><strong>int</strong>: The sampling rate of the normalized audio signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ir</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ir_sum</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing", "modulename": "listeningpy.processing", "kind": "module", "doc": "<p>This module contains functions for processing audio signals.\nIt contains functions for basic processing, such as normalization, convolution, etc.</p>\n"}, {"fullname": "listeningpy.processing.straight", "modulename": "listeningpy.processing", "qualname": "straight", "kind": "function", "doc": "<p>Passes the audio without further processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (numpy.ndarray):\n2-D audio array</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio</strong> (numpy.ndarray):\n2-D audio array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing.gain_adjustment", "modulename": "listeningpy.processing", "qualname": "gain_adjustment", "kind": "function", "doc": "<p>Adjusts the gain of the stimuli.</p>\n\n<p>This function applies a gain adjustment to the input stimuli based on the specified gain value.\nThe gain adjustment is applied by multiplying the stimuli by a factor calculated from the gain value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stimuli</strong> (ndarray):\nThe input stimuli to be adjusted.</li>\n<li><strong>fs_stimuli</strong> (int):\nThe sampling rate of the stimuli.</li>\n<li><strong>gain</strong> (float):\nThe gain value in decibels (dB) to be applied.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[ndarray, int]</strong>: A tuple containing the adjusted stimuli and the sampling rate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stimuli</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs_stimuli</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">gain</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing.convolution", "modulename": "listeningpy.processing", "qualname": "convolution", "kind": "function", "doc": "<p>Performs convolution between IR and stimuli.</p>\n\n<p>Should accept both mono and stereo signals, \nbut both in a form of 2D array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>in1</strong> (numpy.ndarray):\n2-D audio array (IR)</li>\n<li><strong>fs_in1</strong> (int):\nIR sampling frequency</li>\n<li><strong>in2</strong> (numpy.ndarray):\n2-D audio array (stimulus)</li>\n<li><strong>fs_in2</strong> (int):\nsampling frequency of stimuli</li>\n<li><strong>fade_out</strong> (bool, optional):\nFlag indicating whether to apply fade-out to the IR signal, by default True</li>\n<li><strong>normalization</strong> (str, optional):\nType of normalization to apply, by default 'ir_sum'. The alternatives can be peak, rms, lufs, ir_sum.</li>\n<li><strong>normalization_target</strong> (float, optional):\nTarget value for normalization, by default -6</li>\n<li><strong>normalization_prefilter</strong> (str, optional):\nType of prefiltering to apply before normalization, by default ''</li>\n<li><strong>prefilter_critical_freq</strong> (int, optional):\nCritical frequency for the prefilter, by default 200</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio</strong> (numpy.ndarray):\n2-D audio array</li>\n<li><strong>fs_in1</strong> (int):\nIR sampling frequency</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs_in1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">in2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs_in2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fade_out</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">normalization</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ir_sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">normalization_target</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">normalization_prefilter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prefilter_critical_freq</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing.match_fs", "modulename": "listeningpy.processing", "qualname": "match_fs", "kind": "function", "doc": "<p>Resamples in1 to match fs_in2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">fs_in2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fs_in1</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing.up_down", "modulename": "listeningpy.processing", "qualname": "up_down", "kind": "function", "doc": "<p>Changes the volume of audio based on direction and step in dB.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (numpy.ndarray):\n2-D audio array</li>\n<li><strong>direction</strong> (bool):\nTrue value means up, False means down</li>\n<li><strong>last</strong> (float):\nvolume level for previous stimuli</li>\n<li><strong>step</strong> (float):\nstep size in dB, 2 dB by default</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio</strong> (numpy.ndarray):\n2-D audio array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.processing.up_down_noise", "modulename": "listeningpy.processing", "qualname": "up_down_noise", "kind": "function", "doc": "<p>Add noise to the audio signal in an up or down direction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>audio</strong> (ndarray):\nThe audio signal to which the noise will be added.</li>\n<li><strong>noise</strong> (ndarray):\nThe noise signal to be added to the audio.</li>\n<li><strong>direction</strong> (bool):\nThe direction of the noise addition. True for up, False for down.</li>\n<li><strong>last</strong> (float, optional):\nThe last value of the noise added in the previous call, by default 0.</li>\n<li><strong>step</strong> (float, optional):\nThe step size for the noise addition, by default 2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray</strong>: The audio signal with the added noise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation", "modulename": "listeningpy.set_preparation", "kind": "module", "doc": "<p>Functions for preparing sets for listening tests.</p>\n"}, {"fullname": "listeningpy.set_preparation.filter_wavs", "modulename": "listeningpy.set_preparation", "qualname": "filter_wavs", "kind": "function", "doc": "<p>Filters files with '.wav' extension from a list of paths.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>paths</strong> (list[str]):\nlist of file paths</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>paths</strong> (list[str]):\nlist of filtered file paths</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.read_folder", "modulename": "listeningpy.set_preparation", "qualname": "read_folder", "kind": "function", "doc": "<p>Reads files inside a specified folder and keeps '.wav' files\ninside it. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nfolder containing wav files</li>\n<li><strong>parent</strong> (str):\npath to project folder</li>\n<li><strong>filterwav</strong> (bool):\nTrue value filters out other than '.wav' files</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio_paths</strong> (list[str]):\nlist containing paths to audio files inside a specified folder</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">filterwav</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.sub_folders", "modulename": "listeningpy.set_preparation", "qualname": "sub_folders", "kind": "function", "doc": "<p>Return a list of sub-folders within the specified folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nThe name of the folder.</li>\n<li><strong>parent</strong> (str):\nThe parent directory of the folder.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: A list of sub-folders within the specified folder.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.randomization", "modulename": "listeningpy.set_preparation", "qualname": "randomization", "kind": "function", "doc": "<p>Shuffles rows in a provided DataFrame. In this context, it randomizes\nsets for discrimination listening tests.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nDataFrame containing sets for the listening test, one per row.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nDataFrame with randomly shuffled rows.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.abx_combination", "modulename": "listeningpy.set_preparation", "qualname": "abx_combination", "kind": "function", "doc": "<p>Reads files in a specified folder and generates combinations for\nABX test.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nFolder containing wav files.</li>\n<li><strong>parent</strong> (str, optional):\nPath to the project folder. Default is the current directory.</li>\n<li><strong>constant_reference</strong> (bool, optional):\nDetermines whether to generate combinations for standard ABX (False) or CR-ABX (True).\nFor CR-ABX, the combinations will have half the length of ABX. Default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio_path_comb</strong> (pandas.DataFrame):\nSorted sets for ABX test.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The function reads the files in the specified folder and generates combinations of pairs.</li>\n<li>Each combination is represented as a row in the returned DataFrame.</li>\n<li>The DataFrame contains columns for the two audio paths in each combination, as well as an ID column.</li>\n<li>If constant_reference is True, the reference audio path will be the same for all combinations.\nOtherwise, the reference audio path will vary for each combination.</li>\n<li>The DataFrame is sorted by the first audio path in each combination.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">abx_combination</span><span class=\"p\">(</span><span class=\"s2\">&quot;audio_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"s2\">&quot;project_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">constant_reference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">Returns combinations for CR-ABX with a constant reference audio path.</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">abx_combination</span><span class=\"p\">(</span><span class=\"s2\">&quot;audio_folder&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Returns combinations for standard ABX.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">constant_reference</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.abx_combination_subset", "modulename": "listeningpy.set_preparation", "qualname": "abx_combination_subset", "kind": "function", "doc": "<p>Reads files in a specified folder and generates combinations for\nABX test. Creates a subset of combinations containing the first path\nread.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nFolder containing wav files.</li>\n<li><strong>parent</strong> (str, optional):\nPath to the project folder. Default is the current directory.</li>\n<li><strong>constant_reference</strong> (bool, optional):\nDetermines whether to return combinations for standard ABX (False)\nor CR-ABX (True) with half the length of ABX. Default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio_path_comb</strong> (pandas.DataFrame):\nSorted sets for ABX test.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function reads the files in the specified folder and generates\ncombinations for an ABX test. It creates a subset of combinations\nthat contain the first path read. The resulting combinations are\nreturned as a pandas DataFrame.</p>\n\n<p>If <code>constant_reference</code> is True, the function generates combinations\nfor CR-ABX, where the reference path remains constant. If False, it\ngenerates combinations for standard ABX, where the reference path\nchanges for each combination.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">abx_combination_subset</span><span class=\"p\">(</span><span class=\"s2\">&quot;audio_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"s2\">&quot;project_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">constant_reference</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">Returns combinations for CR-ABX with the first path as the reference.</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">abx_combination_subset</span><span class=\"p\">(</span><span class=\"s2\">&quot;audio_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">constant_reference</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">Returns combinations for standard ABX with the first path as the reference.</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">constant_reference</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.adaptive_combination", "modulename": "listeningpy.set_preparation", "qualname": "adaptive_combination", "kind": "function", "doc": "<p>Reads files in a specified folder and generates combinations for\nadaptive method test.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nFolder containing set subfolders.</li>\n<li><strong>parent</strong> (str):\nPath to project folder.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio_path_df</strong> (pandas.DataFrame):\nSorted sets for adaptive method test.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.set_preparation.adaptive_irs", "modulename": "listeningpy.set_preparation", "qualname": "adaptive_irs", "kind": "function", "doc": "<p>Reads files in a specified folder and generates DataFrame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong> (str):\nfolder containing set subfolders</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>audio_path_df</strong> (pandas.DataFrame):\nsorted irs for adaptive method test</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "listeningpy.stimuli", "modulename": "listeningpy.stimuli", "kind": "module", "doc": "<p>Module for playing back stimuli.</p>\n"}, {"fullname": "listeningpy.stimuli.play_sound", "modulename": "listeningpy.stimuli", "qualname": "play_sound", "kind": "function", "doc": "<p>Opens the file, performs requested processing and plays it back.</p>\n\n<p>This will be probably (not tested yet) useful for no or light-weight\nsignal processing. Heavy-weight processing (convolution, etc.) should\nbe probably prebaked when moving to another step inside\na listening test.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\npath to a Wave file</li>\n<li><strong>processing_func</strong> (function):\nprocessing to be performed in real time on a sound</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sound</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">processing_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">straight</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();